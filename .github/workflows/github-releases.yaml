name: Create Github Releases with Packages

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  workflow_call:

env:
  DOCKER_TAEGET_PLATFORMS: linux/amd64,linux/arm64
  NFPM_SOURCE_IMAGES: k8s-athenz-sia
  NFPM_TARGET_PACKAGER: apk,deb,rpm
  NFPM_TARGET_COMPONENTS: nfpm

jobs:

  docker-env:
    runs-on: ubuntu-latest
    outputs:
      DOCKER_REGISTRY_URL: ${{ steps.docker_env.outputs.DOCKER_REGISTRY_URL }}
      DOCKER_REGISTRY_OWNER: ${{ steps.docker_env.outputs.DOCKER_REGISTRY_OWNER }}
      DOCKER_REGISTRY_TOKEN_NAME: ${{ steps.docker_env.outputs.DOCKER_REGISTRY_TOKEN_NAME }}
      DOCKER_REGISTRY_REF: ${{ steps.docker_env.outputs.DOCKER_REGISTRY_REF }}
      SHA_SHORT: ${{ steps.docker_env.outputs.SHA_SHORT }}
    steps:

      # A GitHub Action to expose useful environment variables.
      # https://github.com/FranzDiebold/github-env-vars-action
      -
        name: GitHub Environment Variables Action
        id: env
        # uses: https://github.com/FranzDiebold/github-env-vars-action/tags
        uses: FranzDiebold/github-env-vars-action@v2

      # A GitHub Action to prepare docker environment variables.
      -
        name: Set docker Environment Variables
        id: docker_env
        # env: # Please customize your container image's values
          # DOCKER_REGISTRY_URL: "ghcr.io"
          # DOCKER_REGISTRY_OWNER: ${{ env.CI_REPOSITORY_OWNER_SLUG }}
          # DOCKER_REGISTRY_IMAGE: ${{ env.CI_REPOSITORY_NAME_SLUG }}
          # DOCKER_REGISTRY_TOKEN_NAME: "GITHUB_TOKEN"
        run: |

          # Push to Athenz's docker.io if docker secret exists, else push to actor's personal ghcr.io
          if [[ "${{ secrets.DOCKER_REGISTRY_TOKEN }}" != "" ]]; then
            DOCKER_REGISTRY_URL="${DOCKER_REGISTRY_URL:=docker.io}"
            DOCKER_REGISTRY_TOKEN_NAME='DOCKER_REGISTRY_TOKEN'
          else
            DOCKER_REGISTRY_URL="${DOCKER_REGISTRY_URL:=ghcr.io}"
            DOCKER_REGISTRY_TOKEN_NAME='GITHUB_TOKEN'
          fi

          # Set default values and create image reference
          DOCKER_REGISTRY_OWNER="${DOCKER_REGISTRY_OWNER:=${CI_REPOSITORY_OWNER_SLUG}}"
          DOCKER_REGISTRY_IMAGE="${DOCKER_REGISTRY_IMAGE:=${CI_REPOSITORY_NAME_SLUG}}"
          DOCKER_REGISTRY_REF=${DOCKER_REGISTRY_URL}/${DOCKER_REGISTRY_OWNER}/${DOCKER_REGISTRY_IMAGE}
          SHA_SHORT="${CI_PR_SHA_SHORT:=${CI_SHA_SHORT}}"

          # github output
          echo "DOCKER_REGISTRY_URL=${DOCKER_REGISTRY_URL}" >> "$GITHUB_OUTPUT"
          echo "DOCKER_REGISTRY_TOKEN_NAME=${DOCKER_REGISTRY_TOKEN_NAME}" >> "$GITHUB_OUTPUT"
          echo "DOCKER_REGISTRY_OWNER=${DOCKER_REGISTRY_OWNER}" >> "$GITHUB_OUTPUT"
          echo "DOCKER_REGISTRY_IMAGE=${DOCKER_REGISTRY_IMAGE}" >> "$GITHUB_OUTPUT"
          echo "DOCKER_REGISTRY_REF=${DOCKER_REGISTRY_REF}" >> "$GITHUB_OUTPUT"
          echo "SHA_SHORT=${SHA_SHORT}" >> "$GITHUB_OUTPUT"

  github-releases:
    runs-on: ubuntu-latest
    needs: docker-env
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
    permissions:
      actions: none
      checks: none
      contents: write
      deployments: none
      issues: none
      discussions: none
      packages: read
      pull-requests: none
      repository-projects: none
      security-events: none
      statuses: none
    steps:

      # This action checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
      # https://github.com/actions/checkout
      -
        name: Checkout repository
        id: checkout
        # You may pin to the exact commit or the version.
        # uses: https://github.com/actions/checkout/tags
        uses: actions/checkout@v3
        with:
          submodules: recursive

      # GitHub Action to login against a Docker registry.
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      -
        name: Docker Login to registry ${{ needs.docker-env.outputs.DOCKER_REGISTRY_URL }}
        id: login
        # uses: https://github.com/docker/login-action/tags
        uses: docker/login-action@v2
        with:
          registry: ${{ needs.docker-env.outputs.DOCKER_REGISTRY_URL }} # Server address of Docker registry. If not set then will default to Docker Hub
          username: ${{ needs.docker-env.outputs.DOCKER_REGISTRY_OWNER }} # Username used to log against the Docker registry
          password: ${{ secrets[needs.docker-env.outputs.DOCKER_REGISTRY_TOKEN_NAME] }} # Password or personal access token used to log against the Docker registry
          logout: true # Log out from the Docker registry at the end of a job, default is true

      -
        name: Extract files from Docker image
        id: extract
        run: |
          tag="$(basename ${{ github.ref }})"
          for image in $(echo ${{ env.NFPM_SOURCE_IMAGES }} | tr "," "\n"); do
            for platform in $(echo ${{ env.DOCKER_TAEGET_PLATFORMS }} | tr "," "\n"); do
              set -x
              # Download docker image to a tarball
              docker pull --platform "${platform}" "${{ needs.docker-env.outputs.DOCKER_REGISTRY_URL }}/${{ needs.docker-env.outputs.DOCKER_REGISTRY_OWNER }}/${image}:${tag}"
              arch="$(echo ${platform} | sed -e 's/\([^/]*\)\/\([^/]*\).*/\2/g')"
              docker save "${{ needs.docker-env.outputs.DOCKER_REGISTRY_URL }}/${{ needs.docker-env.outputs.DOCKER_REGISTRY_OWNER }}/${image}:${tag}" -o "${image}_${arch}.tgz"
              docker image prune -fa
              # Decompress docker image tarball
              mkdir "${image}_${arch}" && tar xvf "${image}_${arch}.tgz" --directory "${image}_${arch}"
              cat "${image}_${arch}/manifest.json" | jq -r .[].Layers.[] | xargs -I% tar xvf "${image}_${arch}/%" --directory "${image}_${arch}" || true
              set +x
            done
          done

      # This action sets up a go environment for use in actions by:
      # - Optionally downloading and caching a version of Go by version and adding to PATH.
      # - Registering problem matchers for error output.
      # https://github.com/actions/setup-go
      -
        name: Setup Golang
        id: setup_go
        # You may pin to the exact commit or the version.
        # uses: https://github.com/actions/setup-go/tags
        uses: actions/setup-go@v4
        with:
          # go-version: stable
          go-version-file: './go.mod'
          check-latest: true
          cache: true

      # A GitHub Action to Create Packages
      -
        name: Create packages with nFPM
        id: nfpm
        run: |
          go install github.com/goreleaser/nfpm/v2/cmd/nfpm@latest
          for platform in $(echo ${{ env.DOCKER_TAEGET_PLATFORMS }} | tr "," "\n"); do
            GOARCH=$(echo ${platform} | sed -e 's/\([^/]*\)\/\([^/]*\).*/\2/g')
            for packager in $(echo ${{ env.NFPM_TARGET_PACKAGER }} | tr "," "\n"); do
              for component in $(echo ${{ env.NFPM_TARGET_COMPONENTS }} | tr "," "\n"); do
                SEMVER='${{ github.ref_name }}' nfpm pkg -f "nfpm/linux/${GOARCH}/${component}.yaml" -p "${packager}" -t .
              done
            done
          done

      # A GitHub Action to create GitHub Release
      -
        name: Create GitHub Release
        id: create_release
        if: github.ref_type == 'tag'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag=$(git tag --points-at HEAD)
          curl \
            -XPOST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases" \
            -d "{\"tag_name\":\"$tag\",\"name\":\"Release $tag\",\"draft\":false,\"prerelease\":false}"

      # A GitHub Action to upload release assets
      -
        name: Upload GitHub Release Assets
        id: upload_release_assets
        if: github.ref_type == 'tag'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag=$(git tag --points-at HEAD)
          release_id=$(curl \
            -XGET \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/$tag" \
            | jq '.id')
          for file in $(echo ${{ env.NFPM_TARGET_PACKAGER }} | sed -e 's/\([^,]*\)/\*.\1/g' | tr "," "\n"); do
            curl \
              -XPOST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Content-Type: $(file --mime-type -b $file)" \
              --data-binary @$file \
              "https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/$release_id/assets?name=$(basename $file)"
          done
