name: Build and Publish Docker Image

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  workflow_call:

env:
  DOCKER_TAEGET_PLATFORMS: linux/amd64,linux/arm64
  DOCKER_BUILD_ARGS: |
    BUILDER_IMAGE=docker.io/library/golang:1-alpine
    RUNTIME_IMAGE=docker.io/library/alpine:3
    VERSION=latest
    BUILD_DATE=${{ github.event.repository.updated_at }}
    GID=1000
    UID=1000

jobs:
  docker-build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm/v6
          - linux/arm/v7
          - linux/arm64
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
    permissions:
      actions: none
      checks: none
      contents: read
      deployments: none
      issues: none
      discussions: none
      packages: write
      pull-requests: none
      repository-projects: none
      security-events: none
      statuses: none
    steps:
      # A GitHub Action to expose useful environment variables.
      # https://github.com/FranzDiebold/github-env-vars-action
      -
        name: GitHub Environment Variables Action
        id: env
        # uses: https://github.com/FranzDiebold/github-env-vars-action/tags
        uses: FranzDiebold/github-env-vars-action@v2

      # A GitHub Action to prepare default environment variables.
      -
        name: Set Default Environment Variables
        id: default_env
        env:
          DOCKER_REGISTRY_IMAGE: ${{ env.CI_REPOSITORY_NAME_SLUG }}
          # Please customize your container image's values
          # DOCKER_REGISTRY_URL: "ghcr.io"
          # DOCKER_REGISTRY_OWNER: ${{ env.CI_REPOSITORY_OWNER_SLUG }}
        run: |
          # Push to Athenz's docker.io if secret exists, else push to actor's personal ghcr.io
          if [[ "${{ secrets.DOCKER_REGISTRY_TOKEN }}" != "" ]]; then
            [[ "${{ env.DOCKER_REGISTRY_URL}}" = "" ]] && echo "DOCKER_REGISTRY_URL=docker.io" >> "$GITHUB_ENV"
            [[ "${{ env.DOCKER_REGISTRY_OWNER }}" = "" ]] && echo "DOCKER_REGISTRY_OWNER=${{ env.CI_REPOSITORY_OWNER_SLUG }}" >> "$GITHUB_ENV"
            echo "DOCKER_REGISTRY_TOKEN=${{ secrets.DOCKER_REGISTRY_TOKEN }}" >> "$GITHUB_ENV"
          else
            [[ "${{ env.DOCKER_REGISTRY_URL}}" = "" ]] && echo "DOCKER_REGISTRY_URL=ghcr.io" >> "$GITHUB_ENV"
            [[ "${{ env.DOCKER_REGISTRY_OWNER }}" = "" ]] && echo "DOCKER_REGISTRY_OWNER=${{ env.CI_REPOSITORY_OWNER_SLUG }}" >> "$GITHUB_ENV"
            echo "DOCKER_REGISTRY_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> "$GITHUB_ENV"
          fi

          # set image name
          [[ "${{ env.DOCKER_REGISTRY_IMAGE }}" = "" ]] && echo "DOCKER_REGISTRY_IMAGE=${{ env.CI_REPOSITORY_NAME_SLUG }}" >> "$GITHUB_ENV" || echo "DOCKER_REGISTRY_IMAGE=${{ env.DOCKER_REGISTRY_IMAGE }}" >> "$GITHUB_ENV"

      # This action checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
      # https://github.com/actions/checkout
      -
        name: Checkout repository
        id: checkout
        # You may pin to the exact commit or the version.
        # uses: https://github.com/actions/checkout/tags
        uses: actions/checkout@v3
        with:
          submodules: recursive

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      -
        name: Extract Docker metadata
        id: meta
        # You may pin to the exact commit or the version.
        # uses: https://github.com/docker/metadata-action/tags
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY_URL }}/${{ env.DOCKER_REGISTRY_OWNER }}/${{ env.DOCKER_REGISTRY_IMAGE }}
          # for latest tag
          # latest=auto for tagging latest only for "master", "main" or "customized" branch
          flavor: |
            latest=true
          # eg. refs/heads/master
          # eg. refs/heads/customized
          # eg. refs/pull/318/merge
          # shorthand for {{major}}.{{minor}}.{{patch}} (can include pre-release)
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'customized') }}
            type=ref,event=pr
            type=semver,pattern=v{{version}}
            type=schedule,pattern=nightly

      # GitHub Action to login against a Docker registry.
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      -
        name: Docker Login to registry ${{ env.DOCKER_REGISTRY_URL }}
        id: login
        # You may pin to the exact commit or the version.
        # uses: https://github.com/docker/login-action/tags
        uses: docker/login-action@v2
        with:
          # Server address of Docker registry. If not set then will default to Docker Hub
          registry: ${{ env.DOCKER_REGISTRY_URL }} # optional
          # Username used to log against the Docker registry
          username: ${{ env.DOCKER_REGISTRY_OWNER }} # optional
          # Password or personal access token used to log against the Docker registry
          password: ${{ env.DOCKER_REGISTRY_TOKEN }} # optional
          # Log out from the Docker registry at the end of a job
          logout: true # optional, default is true

      # GitHub Action to install QEMU static binaries.
      # https://github.com/docker/setup-qemu-action
      -
        name: Set up QEMU
        id: qemu
        # You may pin to the exact commit or the version.
        # uses: https://github.com/docker/setup-qemu-action/tags
        uses: docker/setup-qemu-action@v2

      # GitHub Action to set up Docker Buildx.
      # https://github.com/docker/setup-buildx-action
      -
        name: Set up Docker Buildx
        id: buildx
        # You may pin to the exact commit or the version.
        # uses: https://github.com/docker/setup-buildx-action/tags
        uses: docker/setup-buildx-action@v2

      # A GitHub Action to set environment variables for Go
      -
        name: Set Golang env
        id: go_env
        run: |
          # set binary version
          SHA="${CI_PR_SHA_SHORT:=${CI_SHA_SHORT}}"
          IMAGE_TAG="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}"
          export ATHENZ_SIA_VERSION="$(printf '%s (%s)' "${SHA}" "${IMAGE_TAG}")"
          export DOCKER_BUILD_ARGS="$(printf '%s\n%s' "${DOCKER_BUILD_ARGS}" "ATHENZ_SIA_VERSION=${ATHENZ_SIA_VERSION}")"

          echo "ATHENZ_SIA_VERSION=${ATHENZ_SIA_VERSION}" >> "$GITHUB_ENV"
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "DOCKER_BUILD_ARGS<<$EOF" >> "$GITHUB_ENV"
          echo "${DOCKER_BUILD_ARGS}" >> "$GITHUB_ENV"
          echo "$EOF" >> "$GITHUB_ENV"

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      -
        name: Build and push Docker image for ${{ matrix.platform }}
        id: build_and_push
        # You may pin to the exact commit or the version.
        # uses: https://github.com/docker/build-push-action/tags
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ env.DOCKER_BUILD_ARGS }}
          outputs: type=image,name=${{ env.DOCKER_REGISTRY_OWNER }}/${{ env.DOCKER_REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=false
          # cache-from: ${{ env.DOCKER_REGISTRY_URL }}/${{ env.DOCKER_REGISTRY_OWNER }}/${{ env.DOCKER_REGISTRY_IMAGE }}
          cache-from: type=gha # https://docs.docker.com/build/ci/github-actions/cache/
          cache-to: type=gha,mode=max
          # outputs: type=tar,dest=/tmp/image.tar
          # outputs: type=docker,dest=/tmp/image.tar
          # provenance: false # https://github.com/docker/roadmap/issues/371#issuecomment-1416932433

      # TODO: support testing on multiple architecture
      -
        name: Test Docker image
        id: test_image
        run: |
          file ${{ env.DOCKER_REGISTRY_OWNER }}/${{ env.DOCKER_REGISTRY_IMAGE }} || true
          docker load --input ${{ env.DOCKER_REGISTRY_OWNER }}/${{ env.DOCKER_REGISTRY_IMAGE }} || true
          docker image ls -a || true
          docker run --rm ${{ fromJSON(steps.meta.outputs.json).tags[0] }} version || true

      -
        name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      # Upload digest of the container image
      # https://github.com/actions/upload-artifact
      -
        name: Upload digests
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  docker-publish:
    runs-on: ubuntu-latest
    needs:
      - docker-build
    steps:
      -
        name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests


      # TODO: remove duplication
      -
        name: GitHub Environment Variables Action
        id: env
        uses: FranzDiebold/github-env-vars-action@v2
      -
        name: Set Default Environment Variables
        id: default_env
        env:
          DOCKER_REGISTRY_IMAGE: ${{ env.CI_REPOSITORY_NAME_SLUG }}
        run: |
          # Push to Athenz's docker.io if secret exists, else push to actor's personal ghcr.io
          if [[ "${{ secrets.DOCKER_REGISTRY_TOKEN }}" != "" ]]; then
            [[ "${{ env.DOCKER_REGISTRY_URL}}" = "" ]] && echo "DOCKER_REGISTRY_URL=docker.io" >> "$GITHUB_ENV"
            [[ "${{ env.DOCKER_REGISTRY_OWNER }}" = "" ]] && echo "DOCKER_REGISTRY_OWNER=${{ env.CI_REPOSITORY_OWNER_SLUG }}" >> "$GITHUB_ENV"
            echo "DOCKER_REGISTRY_TOKEN=${{ secrets.DOCKER_REGISTRY_TOKEN }}" >> "$GITHUB_ENV"
          else
            [[ "${{ env.DOCKER_REGISTRY_URL}}" = "" ]] && echo "DOCKER_REGISTRY_URL=ghcr.io" >> "$GITHUB_ENV"
            [[ "${{ env.DOCKER_REGISTRY_OWNER }}" = "" ]] && echo "DOCKER_REGISTRY_OWNER=${{ env.CI_REPOSITORY_OWNER_SLUG }}" >> "$GITHUB_ENV"
            echo "DOCKER_REGISTRY_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> "$GITHUB_ENV"
          fi

          # set image name
          [[ "${{ env.DOCKER_REGISTRY_IMAGE }}" = "" ]] && echo "DOCKER_REGISTRY_IMAGE=${{ env.CI_REPOSITORY_NAME_SLUG }}" >> "$GITHUB_ENV" || echo "DOCKER_REGISTRY_IMAGE=${{ env.DOCKER_REGISTRY_IMAGE }}" >> "$GITHUB_ENV"
      -
        name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY_URL }}/${{ env.DOCKER_REGISTRY_OWNER }}/${{ env.DOCKER_REGISTRY_IMAGE }}
          flavor: |
            latest=true
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'customized') }}
            type=ref,event=pr
            type=semver,pattern=v{{version}}
            type=schedule,pattern=nightly
      -
        name: Docker Login to registry ${{ env.DOCKER_REGISTRY_URL }}
        id: login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY_URL }} # optional
          username: ${{ env.DOCKER_REGISTRY_OWNER }} # optional
          password: ${{ env.DOCKER_REGISTRY_TOKEN }} # optional
          logout: true # optional, default is true
      # TODO: remove duplication END

      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.DOCKER_REGISTRY_OWNER }}/${{ env.DOCKER_REGISTRY_IMAGE }}@sha256:%s ' *)
      -
        name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.DOCKER_REGISTRY_OWNER }}/${{ env.DOCKER_REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
