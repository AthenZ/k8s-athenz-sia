#
# Booting mode of SIA
# must be one of "init" or "refresh"
#   "init": SIA will exit after a single credential retrieval
#   "refresh": SIA will run as a continuous process to retrieve credentials periodically and also runs as an HTTP server to provide credentials and metrics
#
MODE=init
#
# Athenz ZTS URL for SIA to request for X.509 certificate
#   https://<ZTS HOST>:<ZTS PORT>/zts/v1 (e.g. "https://www.athenz.io:4443/zts/v1")
#
ENDPOINT=
#
# Athenz Service name for the cloud provider
#   <Athenz Domain>.<Athenz Service> (e.g. "cloud-provider-top-level-domain.cluster-name.identityd-service")
#
PROVIDER_SERVICE=
#
# Suffix restriction for SANs(Subject Alternative Names) DNS field in X.509 certificate
#   Subject Alternative Names:
#     "DNS: <any name>.<Provider DNS Suffix>"
#     "DNS: <Instance ID>.instanceid.athenz.<Provider DNS Suffix>"
# Note: <Provider DNS Suffix> must meat the suffix registered in Athenz (e.g. ".athenz.cloud")
#
DNS_SUFFIX=
#
# Refresh interval for SIA to request to ZTS periodically in containers to get X.509 identity certificate
# Note: This only applies for refresh mode
#
REFRESH_INTERVAL=24h
#
# Delay interval for SIA to boot
# This may be useful when you want to prevent large number of SIA to make requests to ZTS concurrently in a short period
#
DELAY_JITTER_SECONDS=15
#
# File paths to store Athenz X.509 certificate key file
#
KEY_FILE=/var/run/athenz/tls.key
#
# File paths to store Athenz X.509 certificate file
#
CERT_FILE=/var/run/athenz/tls.crt
#
# File paths to store Athenz X.509 ca certificate file that can verify CERT_FILE
#
CA_CERT_FILE=/var/run/athenz/ca.crt
#
# CertificateAuthorityBundle name to retrieve intermediate certificate
#
INTERMEDIATE_CERT_BUNDLE=
#
# Directory to store the log files
#
LOG_DIR=/var/log/athenz-sia
#
# Log level to print logs
# Available values are: TRACE, DEBUG, INFO, WARNING, ERROR, FATAL or PANIC
#
LOG_LEVEL=INFO
#
# Mode to store/load backup of X.509 certificate to/from Kubernetes Secret
# If write is specified, sia must be run uniquely per each secret to prevent conflict
#	"read"
#	"write"
#	"read+write"
#
BACKUP=
#
# Kubernetes TLS Secret to backup and load X.509 certificate files
#
CERT_SECRET=
#
# Cloud users Athenz Domain to map to SIA
#
#   if <ATHENZ_DOMAIN> is not "", Athenz Domain would be:
#     "<ATHENZ_PREFIX><ATHENZ_DOMAIN><ATHENZ_SUFFIX>"
#   <ATHENZ_PREFIX> must end with "."
#   <ATHENZ_SUFFIX> must start with "."
#   Example:
#        ATHENZ_PREFIX="some-tld.foo."
#        ATHENZ_DOMAIN="cluster-bar"
#        ATHENZ_SUFFIX=".baz"
# 
#   if <ATHENZ_DOMAIN> is "", Athenz Domain would be:
#     "<ATHENZ_PREFIX><NAMESPACE><ATHENZ_SUFFIX>"
#   <NAMESPACE> is Kubernetes Namespace set by default
#   <ATHENZ_PREFIX> must end with "."
#   <ATHENZ_SUFFIX> must start with "."
#   Example:
#        ATHENZ_PREFIX="some-tld.foo."
#        NAMESPACE="namespace-bar"
#        ATHENZ_SUFFIX=".baz"
#
# NAMESPACE may be extracted from metadata.namespace in Kubernetes manifests
#
NAMESPACE=
ATHENZ_DOMAIN=
ATHENZ_PREFIX=
ATHENZ_SUFFIX=
#
# Kubernetes Service Account as same name as Athenz Service
#
# SERVICEACCOUNT may be extracted from spec.serviceAccountName in Kubernetes manifests
#
SERVICEACCOUNT=
#
# File path for Kubernetes Service Account Token
# The default is usually "/var/run/secrets/kubernetes.io/bound-serviceaccount/token"
#
SA_TOKEN_FILE=
#
# Kubernetes Pod IP
#
# POD_IP may be extracted from status.podIP in Kubernetes manifests
#
POD_IP=
#
# Kubernetes Pod UID
#
# POD_UID may be extracted from metadata.uid in Kubernetes manifests
#
POD_UID=
#
# CA certificate to verify ZTS server certificate
#
SERVER_CA_CERT=
#
# Comma separated Athenz Roles to retrieve role certificates
#   <Domain>:role.<Role>,<Domain>:role.<Role>...
#
TARGET_DOMAIN_ROLES=
#
# Directory path to store Athenz X.509 role certificate files
#
ROLECERT_DIR=
#
# Directory path to store Athenz role token files
#
TOKEN_DIR=
#
# Token type for Athenz role tokens
#
TOKEN_TYPE=accesstoken
#
# Refresh interval for SIA to request to ZTS periodically in containers to get role tokens
#
TOKEN_REFRESH_INTERVAL=30m
#
# Server address to listen as token provider sidecar (e.g. :8080)
#
TOKEN_SERVER_ADDR=:8880
#
# Server address to listen as metrics exporter sidecar (e.g. :9999)
#
METRICS_SERVER_ADDR=:9999
#
# Delete Instance ID at container shutdown
#
DELETE_INSTANCE_ID=true
#
# Comma separated Athenz Domains to retrieve policies
#   <Domain>,<Domain>...
#
AUTHORIZATION_POLICY_DOMAINS=
#
# Server address to listen as authorization server sidecar (e.g. :8081)
#
AUTHORIZATION_SERVER_ADDR=:8881
